{"version":3,"file":"client.js","sources":["../../../src/performance/client.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Primitive, Transaction, TransactionContext } from '@sentry/types';\nimport { fill, getGlobalObject, stripUrlQueryAndFragment } from '@sentry/utils';\nimport { default as Router } from 'next/router';\n\nconst global = getGlobalObject<Window>();\n\ntype StartTransactionCb = (context: TransactionContext) => Transaction | undefined;\n\nconst DEFAULT_TAGS = {\n  'routing.instrumentation': 'next-router',\n} as const;\n\nlet activeTransaction: Transaction | undefined = undefined;\nlet prevTransactionName: string | undefined = undefined;\nlet startTransaction: StartTransactionCb | undefined = undefined;\n\n/**\n * Creates routing instrumention for Next Router. Only supported for\n * client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function nextRouterInstrumentation(\n  startTransactionCb: StartTransactionCb,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  startTransaction = startTransactionCb;\n  Router.ready(() => {\n    // We can only start the pageload transaction when we have access to the parameterized\n    // route name. Setting the transaction name after the transaction is started could lead\n    // to possible race conditions with the router, so this approach was taken.\n    if (startTransactionOnPageLoad) {\n      const pathIsRoute = Router.route !== null;\n\n      prevTransactionName = pathIsRoute ? stripUrlQueryAndFragment(Router.route) : global.location.pathname;\n      activeTransaction = startTransactionCb({\n        name: prevTransactionName,\n        op: 'pageload',\n        tags: DEFAULT_TAGS,\n        metadata: {\n          source: pathIsRoute ? 'route' : 'url',\n        },\n      });\n    }\n\n    // Spans that aren't attached to any transaction are lost; so if transactions aren't\n    // created (besides potentially the onpageload transaction), no need to wrap the router.\n    if (!startTransactionOnLocationChange) return;\n\n    // `withRouter` uses `useRouter` underneath:\n    // https://github.com/vercel/next.js/blob/de42719619ae69fbd88e445100f15701f6e1e100/packages/next/client/with-router.tsx#L21\n    // Router events also use the router:\n    // https://github.com/vercel/next.js/blob/de42719619ae69fbd88e445100f15701f6e1e100/packages/next/client/router.ts#L92\n    // `Router.changeState` handles the router state changes, so it may be enough to only wrap it\n    // (instead of wrapping all of the Router's functions).\n    const routerPrototype = Object.getPrototypeOf(Router.router);\n    fill(routerPrototype, 'changeState', changeStateWrapper);\n  });\n}\n\ntype RouterChangeState = (\n  method: string,\n  url: string,\n  as: string,\n  options: Record<string, any>,\n  ...args: any[]\n) => void;\ntype WrappedRouterChangeState = RouterChangeState;\n\n/**\n * Wraps Router.changeState()\n * https://github.com/vercel/next.js/blob/da97a18dafc7799e63aa7985adc95f213c2bf5f3/packages/next/next-server/lib/router/router.ts#L1204\n * Start a navigation transaction every time the router changes state.\n */\nfunction changeStateWrapper(originalChangeStateWrapper: RouterChangeState): WrappedRouterChangeState {\n  const wrapper = function (\n    this: any,\n    method: string,\n    // The parameterized url, ex. posts/[id]/[comment]\n    url: string,\n    // The actual url, ex. posts/85/my-comment\n    as: string,\n    options: Record<string, any>,\n    // At the moment there are no additional arguments (meaning the rest parameter is empty).\n    // This is meant to protect from future additions to Next.js API, especially since this is an\n    // internal API.\n    ...args: any[]\n  ): Promise<boolean> {\n    const newTransactionName = stripUrlQueryAndFragment(url);\n    // do not start a transaction if it's from the same page\n    if (startTransaction !== undefined && prevTransactionName !== newTransactionName) {\n      if (activeTransaction) {\n        activeTransaction.finish();\n      }\n      const tags: Record<string, Primitive> = {\n        ...DEFAULT_TAGS,\n        method,\n        ...options,\n      };\n      if (prevTransactionName) {\n        tags.from = prevTransactionName;\n      }\n      prevTransactionName = newTransactionName;\n      activeTransaction = startTransaction({\n        name: prevTransactionName,\n        op: 'navigation',\n        tags,\n        metadata: { source: 'route' },\n      });\n    }\n    return originalChangeStateWrapper.call(this, method, url, as, options, ...args);\n  };\n  return wrapper;\n}\n"],"names":[],"mappings":";;;AAMA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}