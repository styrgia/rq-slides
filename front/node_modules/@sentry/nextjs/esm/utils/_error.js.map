{"version":3,"file":"_error.js","sources":["../../../src/utils/_error.ts"],"sourcesContent":["import { captureException, withScope } from '@sentry/core';\nimport { getCurrentHub } from '@sentry/hub';\nimport { addExceptionMechanism, addRequestDataToEvent, objectify } from '@sentry/utils';\nimport { NextPageContext } from 'next';\n\ntype ContextOrProps = {\n  [key: string]: unknown;\n  req?: NextPageContext['req'];\n  res?: NextPageContext['res'];\n  err?: NextPageContext['err'] | string;\n  statusCode?: number;\n};\n\n/** Platform-agnostic version of `flush` */\nfunction flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient();\n  return client ? client.flush(timeout) : Promise.resolve(false);\n}\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nexport async function captureUnderscoreErrorException(contextOrProps: ContextOrProps): Promise<void> {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = (res && res.statusCode) || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // Nextjs only passes the pathname in the context data given to `getInitialProps`, not the main render function, but\n  // unlike `req` and `res`, for which that also applies, it passes it on both server and client.\n  //\n  // TODO: This check is only necessary because of the workaround for https://github.com/vercel/next.js/issues/8592\n  // explained below. Once that's fixed, we'll have to keep the `inGetInitialProps` check, because lots of people will\n  // still call this function in their custom error component's `render` function, but we can get rid of the check for\n  // `err` and just always bail if we're not in `getInitialProps`.\n  const inGetInitialProps = contextOrProps.pathname !== undefined;\n  if (!inGetInitialProps && !err) {\n    return Promise.resolve();\n  }\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      addExceptionMechanism(event, {\n        type: 'instrument',\n        handled: true,\n        data: {\n          // TODO: Get rid of second half of ternary once https://github.com/vercel/next.js/issues/8592 is fixed.\n          function: inGetInitialProps ? '_error.getInitialProps' : '_error.customErrorComponent',\n        },\n      });\n      return event;\n    });\n\n    if (req) {\n      scope.addEventProcessor(event => addRequestDataToEvent(event, req));\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    const finalError = err || `_error.js called with falsy error (${err})`;\n\n    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n    // store a seen flag on it. (Because of https://github.com/vercel/next.js/issues/8592, it can happen that the custom\n    // error component's `getInitialProps` won't have run, so we have people call this function in their error\n    // component's main render function in addition to in its `getInitialProps`, just in case. By forcing it to be an\n    // object, we can flag it as seen, so that if we hit this a second time, we can no-op.)\n    captureException(objectify(finalError));\n  });\n\n  // In case this is being run as part of a serverless function (as is the case with the server half of nextjs apps\n  // deployed to vercel), make sure the error gets sent to Sentry before the lambda exits.\n  await flush(2000);\n}\n"],"names":[],"mappings":";;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}